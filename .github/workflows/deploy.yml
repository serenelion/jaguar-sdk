name: Deploy Jaguar Monorepo

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_JAGUAR: ${{ github.repository }}/jaguar-sdk
  IMAGE_NAME_TOOLS: ${{ github.repository }}/tool-server

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Local Build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment file
      run: |
        cp .env.example .env
        echo "OPEN_ROUTER_API_KEY=test-key" >> .env
        echo "TOOL_SERVER_API_KEY=test-key" >> .env
        echo "GITHUB_TOKEN=test-token" >> .env

    - name: Test Docker Compose Build
      run: |
        docker-compose build --no-cache
        echo "‚úÖ All services built successfully"

    - name: Test Services Start
      run: |
        docker-compose up -d
        sleep 30
        
        # Test if services are responding
        curl -f http://localhost:3000 || exit 1
        curl -f http://localhost:3002 || exit 1
        curl -f http://localhost:8000/health || exit 1
        
        echo "‚úÖ All services are responding"

    - name: Cleanup
      run: docker-compose down -v

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Jaguar SDK
      id: meta-jaguar
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_JAGUAR }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Tool Server
      id: meta-tools
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_TOOLS }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Jaguar SDK
      uses: docker/build-push-action@v5
      with:
        context: ./packages/jaguar-sdk
        file: ./packages/jaguar-sdk/Dockerfile
        push: true
        tags: ${{ steps.meta-jaguar.outputs.tags }}
        labels: ${{ steps.meta-jaguar.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Tool Server
      uses: docker/build-push-action@v5
      with:
        context: ./packages/ai-open-agents/tools
        file: ./packages/ai-open-agents/tools/Dockerfile
        push: true
        tags: ${{ steps.meta-tools.outputs.tags }}
        labels: ${{ steps.meta-tools.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Digital Ocean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT || 22 }}
        script: |
          # Navigate to deployment directory
          cd /opt/jaguar-monorepo || mkdir -p /opt/jaguar-monorepo && cd /opt/jaguar-monorepo
          
          # Pull latest code
          if [ -d ".git" ]; then
            git pull origin main
          else
            git clone https://github.com/${{ github.repository }}.git .
          fi
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest images
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_JAGUAR }}:latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_TOOLS }}:latest
          
          # Update docker-compose to use registry images
          sed -i 's|build:|# build:|g' docker-compose-production.yml
          sed -i 's|context: ./packages/jaguar-sdk|# context: ./packages/jaguar-sdk|g' docker-compose-production.yml
          sed -i 's|dockerfile: Dockerfile|# dockerfile: Dockerfile|g' docker-compose-production.yml
          sed -i 's|image: ghcr.io/the-spatial-network/jaguar-sdk:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_JAGUAR }}:latest|g' docker-compose-production.yml
          sed -i 's|image: ghcr.io/the-spatial-network/ai-open-agents/tool-server:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_TOOLS }}:latest|g' docker-compose-production.yml
          
          # Deploy with production compose
          docker-compose -f docker-compose-production.yml down
          docker-compose -f docker-compose-production.yml up -d
          
          # Cleanup old images
          docker image prune -f
          
          echo "üöÄ Deployment completed successfully!"
          echo "‚úÖ Jaguar SDK: https://jaguar-sdk.thespatialnetwork.net"
          echo "‚úÖ OpenWebUI: https://ai.thespatialnetwork.net"

  notify:
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "Jaguar SDK: https://jaguar-sdk.thespatialnetwork.net"
        echo "OpenWebUI: https://ai.thespatialnetwork.net"

    - name: Notify Failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs for details."
