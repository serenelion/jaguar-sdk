version: '3.8'

services:
  # Open Web UI service
  open-web-ui:
    image: ghcr.io/open-webui/open-webui:0.6
    container_name: open-web-ui
    restart: unless-stopped
    ports:
      - 8080
    environment:
      OPENAI_API_BASE_URL: '${OPEN_ROUTER_API_BASE}'
      OPENAI_API_KEY: '${OPEN_ROUTER_API_KEY}'
      ENABLE_OLLAMA_API: 'false'
      TOOL_SERVER_CONNECTIONS: |-
        [
          {
            "url": "http://tool-server:8000",
            "path": "openapi.json",
            "auth_type": "bearer",
            "key": "${TOOL_SERVER_API_KEY}",
            "config": {"enable": true}
          }
        ]
    volumes:
      - open-web-ui-data:/app/backend/data
    networks:
      - dokploy-network
    depends_on:
      - tool-server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.open-web-ui.rule=Host(`ai.thespatialnetwork.net`)"
      - "traefik.http.routers.open-web-ui.entrypoints=websecure"
      - "traefik.http.routers.open-web-ui.tls.certResolver=letsencrypt"
      - "traefik.http.services.open-web-ui.loadbalancer.server.port=8080"

  # Custom Tool Server with GitHub Integration
  tool-server:
    image: ghcr.io/the-spatial-network/ai-open-agents/tool-server:latest
    build:
      context: ./packages/ai-open-agents/tools
      dockerfile: Dockerfile
    container_name: ai-tool-server
    restart: unless-stopped
    ports:
      - 8000
    environment:
      - SUPABASE_API_URL=${SUPABASE_API_URL}
      - SUPABASE_API_KEY=${SUPABASE_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}
      - TOOL_SERVER_API_KEY=${TOOL_SERVER_API_KEY}
    networks:
      - dokploy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tool-server.rule=Host(`tools.thespatialnetwork.net`)"
      - "traefik.http.routers.tool-server.entrypoints=websecure"
      - "traefik.http.routers.tool-server.tls.certResolver=letsencrypt"
      - "traefik.http.services.tool-server.loadbalancer.server.port=8000"

  # Jaguar SDK Next.js Application
  jaguar-sdk:
    image: ghcr.io/serenelion/jaguar-sdk:latest
    build:
      context: ./packages/jaguar-sdk
      dockerfile: Dockerfile
    container_name: jaguar-sdk-app
    restart: unless-stopped
    ports:
      - 3000
    environment:
      - NODE_ENV=production
      - POSTGRES_URL=file:/app/data/local.db
      - JAGUAR_BASE_URL=http://open-web-ui:8080
      - JAGUAR_API_KEY=${JAGUAR_API_KEY}
      - AUTH_SECRET=${AUTH_SECRET}
      - NEXTAUTH_URL=https://jaguar.thespatialnetwork.net
      - BLOB_READ_WRITE_TOKEN=${BLOB_READ_WRITE_TOKEN}
      - REDIS_URL=redis://redis:6379
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - TOOL_SERVER_URL=http://tool-server:8000
      - TOOL_SERVER_API_KEY=${TOOL_SERVER_API_KEY}
    volumes:
      - jaguar-db:/app/data
    networks:
      - dokploy-network
    depends_on:
      - tool-server
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaguar-sdk.rule=Host(`jaguar.thespatialnetwork.net`)"
      - "traefik.http.routers.jaguar-sdk.entrypoints=websecure"
      - "traefik.http.routers.jaguar-sdk.tls.certResolver=letsencrypt"
      - "traefik.http.services.jaguar-sdk.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: jaguar-redis
    restart: unless-stopped
    ports:
      - 6379
    volumes:
      - redis-data:/data
    networks:
      - dokploy-network
    command: redis-server --appendonly yes

networks:
  dokploy-network:
    external: true

volumes:
  open-web-ui-data:
  redis-data:
  jaguar-db:
