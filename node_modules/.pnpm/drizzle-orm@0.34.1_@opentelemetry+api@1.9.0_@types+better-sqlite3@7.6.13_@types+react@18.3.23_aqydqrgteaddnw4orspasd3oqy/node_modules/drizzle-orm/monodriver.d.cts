/// <reference types="bun-types" />
/// <reference types="node" />
import type { RDSDataClient, RDSDataClientConfig as RDSConfig } from '@aws-sdk/client-rds-data';
import type { PGlite, PGliteOptions } from '@electric-sql/pglite';
import type { Client as LibsqlClient, Config as LibsqlConfig } from '@libsql/client';
import type { HTTPTransactionOptions as NeonHttpConfig, NeonQueryFunction, Pool as NeonServerlessPool, PoolConfig as NeonServerlessConfig, QueryResult, QueryResultRow } from '@neondatabase/serverless';
import type { Client as PlanetscaleClient, Config as PlanetscaleConfig } from '@planetscale/database';
import type { Config as TiDBServerlessConfig, Connection as TiDBConnection } from '@tidbcloud/serverless';
import type { VercelPool } from '@vercel/postgres';
import type { Database as BetterSQLite3Database, Options as BetterSQLite3Options } from 'better-sqlite3';
import type { Database as BunDatabase } from 'bun:sqlite';
import type { Pool as Mysql2Pool, PoolOptions as Mysql2Config } from 'mysql2';
import type { Pool as NodePgPool, PoolConfig as NodePgPoolConfig } from 'pg';
import type { Options as PostgresJSOptions, PostgresType as PostgresJSPostgresType, Sql as PostgresJsClient } from 'postgres';
import type { AwsDataApiPgDatabase, DrizzleAwsDataApiPgConfig } from "./aws-data-api/pg/index.cjs";
import type { BetterSQLite3Database as DrizzleBetterSQLite3Database } from "./better-sqlite3/index.cjs";
import type { BunSQLiteDatabase } from "./bun-sqlite/index.cjs";
import type { AnyD1Database, DrizzleD1Database } from "./d1/index.cjs";
import type { LibSQLDatabase } from "./libsql/index.cjs";
import type { MySql2Database, MySql2DrizzleConfig } from "./mysql2/index.cjs";
import type { NeonHttpDatabase } from "./neon-http/index.cjs";
import type { NeonDatabase } from "./neon-serverless/index.cjs";
import type { NodePgDatabase } from "./node-postgres/driver.cjs";
import type { PgliteDatabase } from "./pglite/driver.cjs";
import type { PlanetScaleDatabase } from "./planetscale-serverless/index.cjs";
import type { PostgresJsDatabase } from "./postgres-js/index.cjs";
import type { TiDBServerlessDatabase } from "./tidb-serverless/index.cjs";
import type { DrizzleConfig, IfNotImported } from "./utils.cjs";
import type { VercelPgDatabase } from "./vercel-postgres/index.cjs";
type BunSqliteDatabaseOptions = {
    /**
     * Open the database as read-only (no write operations, no create).
     *
     * Equivalent to {@link constants.SQLITE_OPEN_READONLY}
     */
    readonly?: boolean;
    /**
     * Allow creating a new database
     *
     * Equivalent to {@link constants.SQLITE_OPEN_CREATE}
     */
    create?: boolean;
    /**
     * Open the database as read-write
     *
     * Equivalent to {@link constants.SQLITE_OPEN_READWRITE}
     */
    readwrite?: boolean;
};
type BunSqliteDatabaseConfig = ({
    source?: string;
} & BunSqliteDatabaseOptions) | string | undefined;
type BetterSQLite3DatabaseConfig = ({
    source?: string | Buffer;
} & BetterSQLite3Options) | string | undefined;
type MonodriverNeonHttpConfig = ({
    connectionString: string;
} & NeonHttpConfig<boolean, boolean>) | string;
type AwsDataApiConnectionConfig = RDSConfig & Omit<DrizzleAwsDataApiPgConfig, keyof DrizzleConfig>;
type DatabaseClient = 'node-postgres' | 'postgres-js' | 'neon-websocket' | 'neon-http' | 'vercel-postgres' | 'aws-data-api-pg' | 'planetscale' | 'mysql2' | 'tidb-serverless' | 'libsql' | 'turso' | 'd1' | 'bun:sqlite' | 'better-sqlite3' | 'pglite';
type ClientDrizzleInstanceMap<TSchema extends Record<string, any>> = {
    'node-postgres': NodePgDatabase<TSchema>;
    'postgres-js': PostgresJsDatabase<TSchema>;
    'neon-websocket': NeonDatabase<TSchema>;
    'neon-http': NeonHttpDatabase<TSchema>;
    'vercel-postgres': VercelPgDatabase<TSchema>;
    'aws-data-api-pg': AwsDataApiPgDatabase<TSchema>;
    planetscale: PlanetScaleDatabase<TSchema>;
    mysql2: MySql2Database<TSchema>;
    'tidb-serverless': TiDBServerlessDatabase<TSchema>;
    libsql: LibSQLDatabase<TSchema>;
    turso: LibSQLDatabase<TSchema>;
    d1: DrizzleD1Database<TSchema>;
    'bun:sqlite': BunSQLiteDatabase<TSchema>;
    'better-sqlite3': DrizzleBetterSQLite3Database<TSchema>;
    pglite: PgliteDatabase<TSchema>;
};
type Primitive = string | number | boolean | undefined | null;
type ClientInstanceMap = {
    'node-postgres': NodePgPool;
    'postgres-js': PostgresJsClient;
    'neon-websocket': NeonServerlessPool;
    'neon-http': NeonQueryFunction<boolean, boolean>;
    'vercel-postgres': VercelPool & (<O extends QueryResultRow>(strings: TemplateStringsArray, ...values: Primitive[]) => Promise<QueryResult<O>>);
    'aws-data-api-pg': RDSDataClient;
    planetscale: PlanetscaleClient;
    mysql2: Mysql2Pool;
    'tidb-serverless': TiDBConnection;
    libsql: LibsqlClient;
    turso: LibsqlClient;
    d1: AnyD1Database;
    'bun:sqlite': BunDatabase;
    'better-sqlite3': BetterSQLite3Database;
    pglite: PGlite;
};
type ClientTypeImportErrorMap = {
    'node-postgres': 'pg`, `@types/pg';
    'postgres-js': 'postgres';
    'neon-websocket': '@neondatabase/serverless';
    'neon-http': '@neondatabase/serverless';
    'vercel-postgres': '@vercel/postgres';
    'aws-data-api-pg': '@aws-sdk/client-rds-data';
    planetscale: '@planetscale/database';
    mysql2: 'mysql2';
    'tidb-serverless': '@tidbcloud/serverless';
    libsql: '@libsql/client';
    turso: '@libsql/client';
    d1: '@cloudflare/workers-types` or `@miniflare/d1';
    'bun:sqlite': 'bun-types';
    'better-sqlite3': 'better-sqlite3';
    pglite: '@electric-sql/pglite';
};
type ImportTypeError<TClient extends DatabaseClient> = `Please install \`${ClientTypeImportErrorMap[TClient]}\`to allow Drizzle ORM to connect to the database`;
type InitializerParams = {
    'node-postgres': {
        connection: string | NodePgPoolConfig;
    };
    'postgres-js': {
        connection: string | ({
            url?: string;
        } & PostgresJSOptions<Record<string, PostgresJSPostgresType>>);
    };
    'neon-websocket': {
        connection: string | NeonServerlessConfig;
    };
    'neon-http': {
        connection: MonodriverNeonHttpConfig;
    };
    'vercel-postgres': {};
    'aws-data-api-pg': {
        connection: AwsDataApiConnectionConfig;
    };
    planetscale: {
        connection: PlanetscaleConfig | string;
    };
    mysql2: {
        connection: Mysql2Config | string;
    };
    'tidb-serverless': {
        connection: TiDBServerlessConfig | string;
    };
    libsql: {
        connection: LibsqlConfig | string;
    };
    turso: {
        connection: LibsqlConfig | string;
    };
    d1: {
        connection: AnyD1Database;
    };
    'bun:sqlite': {
        connection?: BunSqliteDatabaseConfig;
    };
    'better-sqlite3': {
        connection?: BetterSQLite3DatabaseConfig;
    };
    pglite: {
        connection?: (PGliteOptions & {
            dataDir?: string;
        }) | string;
    };
};
type DetermineClient<TClient extends DatabaseClient, TSchema extends Record<string, unknown>> = ClientDrizzleInstanceMap<TSchema>[TClient] & {
    $client: ClientInstanceMap[TClient];
};
export declare function drizzle<TClient extends DatabaseClient, TSchema extends Record<string, unknown> = Record<string, never>>(client: TClient, ...params: TClient extends 'bun:sqlite' | 'better-sqlite3' | 'pglite' ? ([
] | [
    (IfNotImported<ClientInstanceMap[TClient], {
        connection: ImportTypeError<TClient>;
    }, InitializerParams[TClient]> & DrizzleConfig<TSchema>)
] | [string]) : TClient extends 'vercel-postgres' ? ([] | [
    (IfNotImported<ClientInstanceMap[TClient], {
        connection: ImportTypeError<TClient>;
    }, InitializerParams[TClient]> & DrizzleConfig<TSchema>)
]) : TClient extends 'postgres-js' | 'tidb-serverless' | 'libsql' | 'turso' | 'planetscale' | 'neon-http' | 'node-postgres' ? ([
    (IfNotImported<ClientInstanceMap[TClient], {
        connection: ImportTypeError<TClient>;
    }, InitializerParams[TClient]> & DrizzleConfig<TSchema>)
] | [string]) : TClient extends 'mysql2' ? ([
    (IfNotImported<ClientInstanceMap[TClient], {
        connection: ImportTypeError<TClient>;
    }, InitializerParams[TClient]> & MySql2DrizzleConfig<TSchema>)
] | [string]) : TClient extends 'neon-websocket' ? ([
    IfNotImported<ClientInstanceMap[TClient], {
        connection: ImportTypeError<TClient>;
    }, InitializerParams[TClient]> & DrizzleConfig<TSchema> & {
        ws?: any;
    }
] | [string]) : [
    (IfNotImported<ClientInstanceMap[TClient], {
        connection: ImportTypeError<TClient>;
    }, InitializerParams[TClient]> & DrizzleConfig<TSchema>)
]): Promise<DetermineClient<TClient, TSchema>>;
export {};
