"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var monomigrator_exports = {};
__export(monomigrator_exports, {
  migrate: () => migrate
});
module.exports = __toCommonJS(monomigrator_exports);
var import_entity = require("./entity.cjs");
async function migrate(db, config) {
  switch (db.constructor[import_entity.entityKind]) {
    case "AwsDataApiPgDatabase": {
      const { migrate: migrate2 } = await import("./aws-data-api/pg/migrator.cjs");
      return migrate2(db, config);
    }
    case "BetterSQLite3Database": {
      const { migrate: migrate2 } = await import("./better-sqlite3/migrator.cjs");
      return migrate2(db, config);
    }
    case "BunSQLiteDatabase": {
      const { migrate: migrate2 } = await import("./bun-sqlite/migrator.cjs");
      return migrate2(db, config);
    }
    case "D1Database": {
      const { migrate: migrate2 } = await import("./d1/migrator.cjs");
      return migrate2(db, config);
    }
    case "LibSQLDatabase": {
      const { migrate: migrate2 } = await import("./libsql/migrator.cjs");
      return migrate2(db, config);
    }
    case "MySql2Database": {
      const { migrate: migrate2 } = await import("./mysql2/migrator.cjs");
      return migrate2(db, config);
    }
    case "NeonHttpDatabase": {
      const { migrate: migrate2 } = await import("./neon-http/migrator.cjs");
      return migrate2(db, config);
    }
    case "NeonServerlessDatabase": {
      const { migrate: migrate2 } = await import("./neon-serverless/migrator.cjs");
      return migrate2(db, config);
    }
    case "NodePgDatabase": {
      const { migrate: migrate2 } = await import("./node-postgres/migrator.cjs");
      return migrate2(db, config);
    }
    case "PlanetScaleDatabase": {
      const { migrate: migrate2 } = await import("./planetscale-serverless/migrator.cjs");
      return migrate2(db, config);
    }
    case "PostgresJsDatabase": {
      const { migrate: migrate2 } = await import("./postgres-js/migrator.cjs");
      return migrate2(db, config);
    }
    case "TiDBServerlessDatabase": {
      const { migrate: migrate2 } = await import("./tidb-serverless/migrator.cjs");
      return migrate2(db, config);
    }
    case "VercelPgDatabase": {
      const { migrate: migrate2 } = await import("./vercel-postgres/migrator.cjs");
      return migrate2(db, config);
    }
    case "PgliteDatabase": {
      const { migrate: migrate2 } = await import("./pglite/migrator.cjs");
      return migrate2(db, config);
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  migrate
});
//# sourceMappingURL=monomigrator.cjs.map